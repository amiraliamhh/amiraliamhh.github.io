{"version":3,"sources":["models/Message.ts","models/User.ts","Store.tsx","components/sidebar/Sidebar.tsx","components/friend/Friend.tsx","components/chat/ChatBox.tsx","components/chat/Chat.tsx","components/message-input/MessageInput.tsx","components/new-chat/NewChat.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Message","content","sender","this","User","name","id","chat","push","myFriends","initialValue","friends","currentChat","store","createContext","state","dispatch","Provider","reducer","action","type","Object","assign","sendMessage","message","concat","length","StateProvider","children","useReducer","value","Sidebar","useContext","className","map","user","selected","Friend","onClick","ChatBox","Chat","index","MessageInput","useState","setMessage","placeholder","onChange","target","onKeyDown","evt","key","NewChat","isOpen","setOpen","friendsName","setFriendsName","closeModal","stopPropagation","onSubmit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d852145.chunk.js","sourcesContent":["export class Message {\n  content: string\n  sender: number\n\n  constructor(content: string, sender: number) {\n    this.content = content\n    this.sender = sender\n  }\n}\n","import { Message } from './Message'\n\nexport class User {\n  name: string\n  id: number\n  chat: Message[]\n\n  constructor(name: string, id: number) {\n    this.name = name\n    this.id = id\n    this.chat = []\n  }\n\n  sendMessage(content: string, sender = 0) {\n    this.chat.push(new Message(content, sender))\n  }\n}\n","import React, { createContext, useReducer, Props } from 'react'\nimport {\n  User\n} from './models'\n\nconst myFriends = [\n  new User('John', 1),\n  new User('Sarah', 2)\n]\n\nconst initialValue = {\n  friends: myFriends,\n  currentChat: myFriends[0]\n}\n\nexport const store = createContext<ContextValue>({ state: initialValue, dispatch: () => {} })\nconst { Provider } = store\n\nconst reducer = (state: ContextType, action: Action) => {\n  switch(action.type) {\n    case 'changeChat':\n      return Object.assign({}, state, { currentChat: action.chat })\n    case 'sendMessage':\n      state.currentChat.sendMessage(action.message)\n      return Object.assign({}, state)\n    case 'newChat':\n      return Object.assign(\n        {},\n        state,\n        {\n          friends: state.friends.concat(new User(action.name, state.friends.length + 1))\n        }\n      )\n    default:\n      return state\n  }\n}\n\nexport const StateProvider = ({ children }: Props<any>) => {\n  const [state, dispatch] = useReducer(reducer, initialValue)\n\n  return <Provider value={{ state, dispatch }}>{ children }</Provider>\n};\n\ninterface ContextValue {\n  state: ContextType\n  dispatch: React.Dispatch<Action>\n}\n\ninterface ContextType {\n  friends: User[]\n  currentChat: User\n}\n\ninterface Action {\n  type: string\n  [key: string]: any\n}\n","import React, { useContext } from 'react'\nimport { Friend } from '../'\nimport { store } from '../../Store'\nimport './Sidebar.css'\n\nexport const Sidebar = () => {\n  const { state: { friends, currentChat } } = useContext(store)\n\n  return (\n    <div className=\"sidebar\">\n      {\n        friends.map((user) => (\n          <Friend selected={currentChat.id === user.id} user={user} key={user.id} />\n        ))\n      }\n    </div>\n  )\n}\n","import React, { useContext } from 'react'\nimport { store } from '../../Store'\nimport { User } from '../../models'\nimport './Friend.css'\n\ninterface FriendProps {\n  selected: boolean\n  user: User\n}\n\nexport const Friend = ({ user, selected }: FriendProps) => {\n  const { dispatch } = useContext(store)\n\n  const changeChat = () => {\n    dispatch({ type: 'changeChat', chat: user })\n  }\n\n  return (\n    <div className={`friend ${selected ? 'selected' : ''}`} onClick={changeChat} >\n      { user.name }\n    </div>\n  )\n}\n","import React from 'react'\nimport { Message } from '../../models'\n\ninterface ChatBoxProps {\n  className?: string\n  message: Message\n}\n\nexport const ChatBox = ({ className = '', message }: ChatBoxProps) => (\n  <div className={`chat-box ${className} ${message.sender === 0 ? 'mine' : ''}`}>\n    { message.content }\n  </div>\n)\n","import React, { useContext } from 'react'\nimport { ChatBox } from './ChatBox'\nimport { MessageInput } from '../'\nimport './Chat.css'\nimport { store } from '../../Store'\n\nexport const Chat = () => {\n  const { state: { currentChat } } = useContext(store)\n\n  return (\n    <>\n      <div className=\"chat\">\n        {\n          currentChat.chat.length\n          ? currentChat.chat.map((message, index) => <ChatBox key={index} message={message} />)\n          : <p>No messages yet ...</p>\n        }\n      </div>\n      <MessageInput />\n    </>\n  )\n}\n","import React, { useState, ChangeEvent, useContext } from 'react'\nimport './MessageInput.css'\nimport { store } from '../../Store'\n\nexport const MessageInput = () => {\n  const { dispatch } = useContext(store)\n  const [message, setMessage] = useState('')\n\n  const handleChange = ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => {\n    setMessage(value)\n  }\n\n  const sendMessage = () => {\n    setMessage('')\n    dispatch({\n      type: 'sendMessage',\n      message\n    })\n  }\n\n  const handleEnter = (evt: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (evt.key === 'Enter') {\n      sendMessage()\n    }\n  }\n\n  return (\n    <div className=\"message-input\">\n      <textarea placeholder=\"Type here ...\" onChange={handleChange} value={message} onKeyDown={handleEnter} />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  )\n}\n","import React, { useState, useContext } from 'react'\nimport { store } from '../../Store'\nimport './NewChat.css'\n\nexport const NewChat = () => {\n  const { dispatch } = useContext(store)\n  const [isOpen, setOpen] = useState(false)\n  const [friendsName, setFriendsName] = useState('')\n\n  const openModal = () => {\n    setOpen(true)\n  }\n\n  const closeModal = () => {\n    setOpen(false)\n  }\n\n  const stopPropagation = (evt: React.MouseEvent<HTMLFormElement>) => {\n    evt.stopPropagation()\n  }\n\n  const handleNameChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n    setFriendsName(value)\n  }\n\n  const startNewChat = () => {\n    closeModal()\n    setFriendsName('')\n    dispatch({ type: 'newChat', name: friendsName })\n  }\n\n  return (\n    <>\n      <button className=\"new-chat-button\" onClick={openModal}>\n        +\n      </button>\n      {\n        isOpen\n        ? <div className=\"new-chat-modal\" onClick={closeModal}>\n          <form className=\"new-chat-box\" onClick={stopPropagation} onSubmit={startNewChat}>\n            <h4>Please enter your friends name:</h4>\n            <input type=\"text\" value={friendsName} onChange={handleNameChange} />\n            <button type=\"submit\">Start to Chat</button>\n          </form>\n        </div>\n        : null\n      }\n    </>\n  )\n}\n","import React from 'react'\nimport {\n  Sidebar,\n  Chat,\n  NewChat\n} from './components'\nimport { StateProvider } from './Store'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <StateProvider>\n        <div className=\"sidebar-container\">\n          <Sidebar />\n        </div>\n        <Chat />\n        <NewChat />\n      </StateProvider>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}